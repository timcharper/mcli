#!/usr/bin/env bash

: ${MARATHON_CURL_CMD:=curl}
: ${MARATHON_CLI_CFG:=/etc/default/marathon-cli}
: ${MARATHON_HTTP_PROTO:=http}
: ${MARATHON_MASTER_URL:=${MARATHON_HTTP_PROTO}://marathon.mesos:8080}

progname=$(basename "$0")

if [ "$progname" != "marathon-cli" ]; then
  cmd=${progname#marathon-}
  INVOCATION="$0"
else
  cmd=$1
  shift
  INVOCATION="$0 $cmd"
fi

if [ -f "${MARATHON_CLI_CFG}" ]; then
  source "${MARATHON_CLI_CFG}"
fi

set -e

help() {
  cat <<EOF
Usage: ${INVOCATION} <cmd> [<options...>]

Commands:

  - app               : app sub-commands
  - curl              : curl Marathon
  - log               ; subcommand for various logging manipulation actions
  - pod               : pod sub-command
  - queue             : list Marathon pending deployments

For help on commands, $0 <cmd> --help

EOF
}

app-edit-help() {
  cat <<EOF
Edit an app definitions JSON

Usage: ${INVOCATION} <app-id> [<options...>]

  - help             : This help
EOF
}

pod-help() {
  cat <<EOF
Usage: ${INVOCATION} <sub-command> [<options...>]

  - show             : Show a pod
  - list             : list pods
  - instance         : Instance sub-commands
  - delete           : Delete a pod
  - edit             : Edit a pod JSON definition
  - help             : This help
EOF
}

pod-instance-help() {
  cat <<EOF
Usage: ${INVOCATION} <sub-command> [<options...>]

  - list             : list pod instances
  - kill             : Kill a pod instance
  - help             : This help
EOF
}


app-instance-show-help() {
  cat <<EOF
Show the full JSON details for a Marathon instance

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-restart-help() {
  cat <<EOF
Restart an app.

usage: ${INVOCATION} <id>

  Options:

  --force         - Force the app to be deleted, if it is currently locked by
                    some other deployment

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-scale-help() {
  cat <<EOF
Scale an app

usage: ${INVOCATION} <app-id> [options]

  Options:

  --instances     - (required) The number of target instances

  --force         - Force the app to be scaled, even if it is currently locked
                    by some other deployment

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

pod-instance-kill-help() {
  cat <<EOF
Kill a Marathon pod

usage: ${INVOCATION} <instance_id>

  Options:

  --wipe          - Expunge the instance from Marathon; don't reuse it's id. If
                    there's an associated persistent volume, delete it.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-instance-kill-help() {
  cat <<EOF
Kill a Marathon task

usage: ${INVOCATION} <id1> <id2> <id3>

  Options:

  --wipe          - Expunge the instance from Marathon; don't reuse it's id. If
                    there's an associated persistent volume, delete it.

  --scale         - Adjust the scale of the service as part of this kill

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

pod-delete-help() {
  cat <<EOF
Delete a Marathon pod.

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-delete-help() {
  cat <<EOF
Delete a Marathon app.

usage: ${INVOCATION} <id>

  Options:

  --force         - Force the app to be restarted if it is currently locked by
                    some other deployment

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

pod-show-help() {
  cat <<EOF
Show the full JSON details for a Marathon pod.

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-instance-help() {
  cat <<EOF
Usage: ${INVOCATION} <sub-command> [<options...>]

  - show             : Show instance details
  - list             : List app instances
  - help             : This help
EOF
}

app-help() {
  cat <<EOF
Usage: ${INVOCATION} <sub-command> [<options...>]

  - show             : Show an app
  - list             : List Marathon apps
  - instance         : App instance sub-commands
  - delete           : Delete an app
  - edit             : Edit an app JSON definition
  - help             : This help
EOF
}

app-show-help() {
  cat <<EOF
Show the full JSON details for a Marathon app.

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

app-instance-show() {
  declare -a otherargs
  local color_output=""
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi
  HELP=app-instance-show-help


  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        inspect-help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $HELP
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying an app id; got ${otherargs[@]}"
    $HELP
    exit 1
  fi

  task_id="${otherargs[0]}"

  marathon-curl "/v2/tasks" | jq $color_output '.tasks[] | select(.id == "'"$task_id"'")'
}

app-scale() {
  local color_output=""
  local force=""
  local instances=""
  local app_id=""
  local help="app-scale-help"
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -f|--force)
        force=1
        ;;
      -i|--instances)
        instances="$1"
        shift
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        if [ -z "$app_id" ]; then
          app_id="$arg"
        else
          echo "App already specified"
          $help
          exit 1
        fi
        ;;
    esac
  done

  if [ -z "$app_id" ]; then
    echo "App id must be specified"
    $help
    exit 1
  fi

  if [ -z "$instances" ]; then
    echo "--instances must be specified"
    $help
    exit 1
  fi

  local params=""
  if [ ! -z "$force" ]; then
    params="?force=true"
  fi

  marathon-curl "/v2/apps${app_id}${params}" -X PUT --data '{"instances": '${instances}'}' | jq $color_output '.'
}

app-restart() {
  declare -a otherargs
  local color_output=""
  local force=""
  local help="app-restart-help"
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -f|--force)
        force=1
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying an app id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  app_id="${otherargs[0]}"

  local params=""
  if [ ! -z "$force" ]; then
    params="?force=true"
  fi

  marathon-curl "/v2/apps${app_id}/restart${params}" -X POST | jq $color_output '.'
}

app-instance-kill() {
  declare -a task_ids
  local color_output=""
  local help="app-instance-kill-help"
  declare -a params
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -s|--scale)
        params+=("scale=true")
        scale=1
        ;;
      -w|--wipe)
        params+=("wipe=true")
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        task_ids+=("$arg")
        ;;
    esac
  done

  if [ "${#task_ids[@]}" -eq 0 ]; then
    echo "expected at least one argument specifying a task id; got ${task_ids[@]}"
    $help
    exit 1
  fi

  local payload
  read -r -d '' payload <<-EOF || true
{
  "ids": ["$(join-str '", "' "${task_ids[@]}")"]
}
EOF
  marathon-curl "/v2/tasks/delete?$(join-str "&" "${params[@]}")" --data "${payload}" | jq $color_output '.'
}

pod-instance-kill() {
  declare -a instance_id
  local color_output=""
  local help="pod-instance-kill-help"
  declare -a params
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -w|--wipe)
        params+=("wipe=true")
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        if [ -z "$instance_id" ]; then
          instance_id="$arg"
        else
          echo "Only one instance id can be specified" 1>&2
          $help
          exit 1
        fi
        ;;
    esac
  done

  # find the pod, because, well, the API is cool like that
  local pod_id=$(marathon-curl "/v2/pods/::status" | jq -r '. | map(select(.instances[] | select(.id == "'"${instance_id}"'"))) | map(.id)[0] // ""')

  if [ -z "$pod_id" ]; then
    echo "Could not find instance ${instance_id}" 1>&2
    exit 1
  fi

  echo "$pod_id"

  marathon-curl "/v2/pods/${pod_id}::instances/${instance_id}?$(join-str "&" "${params[@]}")" -X DELETE | jq $color_output '.'
}

pod-delete() {
  declare -a otherargs
  local color_output=""
  local force=""
  local help="pod-delete-help"
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -f|--force)
        force=1
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying a pod id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  pod_id="${otherargs[0]}"

  local params=""
  if [ ! -z "$force" ]; then
    params="?force=true"
  fi

  marathon-curl "/v2/pods${pod_id}" -X DELETE | jq $color_output '.'
}

app-delete() {
  declare -a otherargs
  local color_output=""
  local force=""
  local help="app-delete-help"
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -f|--force)
        force=1
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying an app id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  app_id="${otherargs[0]}"

  local params=""
  if [ ! -z "$force" ]; then
    params="?force=true"
  fi

  marathon-curl "/v2/apps${app_id}${params}" -X DELETE | jq $color_output '.'
}

app-edit() {
  declare -a otherargs
  help="app-edit-help"

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying an app id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  app_id="${otherargs[0]}"

  temp_orig_file=$(mktemp)
  temp_edit_file=$(mktemp)
  temp_result=$(mktemp)
  force_param=""
  marathon-curl "/v2/apps${app_id}" | jq --monochrome-output '.app | delpaths([["tasks"], ["deployments"], ["tasksUnhealthy"], ["tasksHealthy"], ["tasksRunning"], ["tasksStaged"], ["version"], ["versionInfo"]])' > $temp_orig_file
  cp $temp_orig_file $temp_edit_file

  do-perform-edit() {
    ${EDITOR:-vim} $temp_edit_file
    if (diff -u $temp_edit_file $temp_orig_file); then
      echo "No changes were made"
      # exit
    fi
    do-post-edit
  }

  do-post-edit() {
    marathon-curl "/v2/apps/${app_id}?${force_param}" --no-fail -i -X PUT --data "@${temp_edit_file}" > $temp_result

    LINES=($(wc -l "$temp_result"))
    head -n $((${LINES[0]} - 2)) $temp_result
    if (grep "200 OK" $temp_result); then
      echo
      echo Success
    else
      tail -n 2 $temp_result | jq .

      echo "Retry [yes/no/force]?"
      read response
      case $response in
        force)
          force_param="force=true"
          do-post-edit
          ;;
        n*)
          RETRY=false
          ;;
        *)
          do-perform-edit
          ;;
      esac
    fi
  }

  do-perform-edit

  rm $temp_result
  rm $temp_edit_file
  rm $temp_orig_file
}

pod-edit() {
  declare -a otherargs
  help="pod-edit-help"

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying a pod id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  pod_id="${otherargs[0]}"

  temp_orig_file=$(mktemp)
  temp_edit_file=$(mktemp)
  temp_result=$(mktemp)
  force_param=""
  marathon-curl "/v2/pods${pod_id}" | jq --monochrome-output '.' > $temp_orig_file
  cp $temp_orig_file $temp_edit_file

  do-perform-edit() {
    ${EDITOR:-vim} $temp_edit_file
    if (diff -u $temp_edit_file $temp_orig_file); then
      echo "No changes were made"
      # exit
    fi
    do-post-edit
  }

  do-post-edit() {
    marathon-curl "/v2/pods/${pod_id}?${force_param}" --no-fail -i -X PUT --data "@${temp_edit_file}" > $temp_result

    LINES=($(wc -l "$temp_result"))
    head -n $((${LINES[0]} - 2)) $temp_result
    if (grep "200 OK" $temp_result); then
      echo
      echo Success
    else
      tail -n 2 $temp_result | jq .

      echo "Retry [yes/no/force]?"
      read response
      case $response in
        force)
          force_param="force=true"
          do-post-edit
          ;;
        n*)
          RETRY=false
          ;;
        *)
          do-perform-edit
          ;;
      esac
    fi
  }

  do-perform-edit

  rm $temp_result
  rm $temp_edit_file
  rm $temp_orig_file
}

pod-show() {
  declare -a otherargs
  local color_output=""
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi
  help="pod-show-help"


  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying a pod id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  pod_id="${otherargs[0]}"

  marathon-curl "/v2/pods${pod_id}" | jq $color_output '.'
}

app-show() {
  declare -a otherargs
  local color_output=""
  if [ -t 1 ]; then
    color_output="--color-output"
  else
    color_output="--monochrome-output"
  fi

  help="app-show-help"

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        color_output="--color-output"
        ;;
      --no-color)
        color_output="--monochrome-output"
        ;;
      -*)
        echo "unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        otherargs+=("$arg")
        ;;
    esac
  done

  if [ "${#otherargs[@]}" -ne 1 ]; then
    echo "expected one argument specifying an app id; got ${otherargs[@]}"
    $help
    exit 1
  fi

  app_id="${otherargs[0]}"

  marathon-curl "/v2/apps${app_id}" | jq $color_output '.'
}

app-instance-list-help() {
  cat <<EOF
List marathon tasks

usage: ${INVOCATION} [options...]

  Options:

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default               - Group: id state startedAt host
      id
      host                  - Host on which the task is running
      appId                 - AppId for this instance
      stagedAt              - Time at which the task was staged
      startedAt
      state
      version
      ports
      servicePorts
      ipAddresses
      agentId
      hcFirstSuccess        - Health check first success (comma delimited if multiple)
      hcLastFailure         - "            last failure
      hcConsecutiveFailures - "            consecutive failures
      hcAlive               - "            instance considered healthy
EOF
}

pod-instance-list-help() {
  cat <<EOF
List Marathon pod instances

usage: ${INVOCATION} list-instances [options...]

  Options:

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default               - Group: id status statusSince agentHostname

      id
      agentHostname
      agentId
      status                - Status of the pod
      statusSince           - Time since pod was in the current status
      specReferences
      lastUpdated
      lastChanged
      cpus                  - Total amount of cpus allocated to pod
      mem                   - "               mem
      disk                  - "               disk
      gpus                  - "               gpus
      containerCount        - Count of containers in pod
      volumeCount           - Count of volumes in pod
      networkCount          - Count of networks assigned to pod
EOF
}



queue-help() {
  cat <<EOF
List current Marathon deployment queue

usage: ${INVOCATION} [options...]

  Options:

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default      - Group: id count since delay processedOffersCount unusedOffersCount lastUsedOfferAt
      rejections   - Group: UnfulfilledRole UnfulfilledConstraint NoCorrespondingReservationFound AgentMaintenance InsufficientCpus InsufficientMemory InsufficientDisk InsufficientGpus InsufficientPorts DeclinedScarceResources

      id                   - Deployment app id
      count                - Number of instances left to launch
      processedOffersCount - Number of offers processed so far
      unusedOffersCount    - Number of offers received but not used
      lastUsedOfferAt      - Date of the last used offer
      since                - Time since when the deployment has been started
      overdue              - If true, deployment is backed off
      delay                - Number of seconds waiting until next launch attempt. If non-null, then deployment is delayed.
      UnfulfilledRole                 - Number of offers declined with this reason
      UnfulfilledConstraint           - "
      NoCorrespondingReservationFound - "
      AgentMaintenance                - "
      InsufficientCpus                - "
      InsufficientMemory              - "
      InsufficientDisk                - "
      InsufficientGpus                - "
      InsufficientPorts               - "
      DeclinedScarceResources         - "
EOF
}

app-list-help() {
  cat <<EOF
List marathon apps.

usage: ${INVOCATION} [options...]

  Options:

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default      - Group: id version instances
      taskCounts   - Group: tasksStaged tasksRunning tasksHealthy tasksUnhealthy

      id                   - App id
      cmd                  - command to run
      cpus                 - # of cpus assigned to app
      mem                  - Amount of RAM allocated for app
      disk                 - Amount of scratch disk allocated for app
      gpus                 - # of GPUs assigned to app
      executor             - executor used
      instances            - target # of instances
      backoffSeconds       - Deployment backoffSeconds
      backoffFactor        - Deployment backoffFactor
      maxLaunchDelaySeconds
      version              - Current version of app definition
      residency            - Does the app have persistent state
      killSelection        - When scaling down, kill what?
      requirePorts         - Host networking concept; read the docs
      tasksStaged          - # of tasks currently staged
      tasksRunning         - " running

      tasksHealthy         - " healthy
      tasksUnhealthy       - " staged
      ports                - Host networking concept; read the docs
      container-type       - DOCKER or MESOS container?
      docker-network-type
      volume-count         - # of volumes assigned
      docker-image         - Docker image used for provisioning container
      lastScalingAt        - Last time app scaled up or down (this does not affect the version)
      lastConfigChangeAt   - Last time app config was changed
      deploymentCount      - # of pending deployments associated with this app
      hcCount              - # of health checks assigned to app
      hcType               - List of health check types

EOF
}

pod-list-help() {
  cat <<EOF
List marathon pods

usage: ${INVOCATION} [options...]

  Options:

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default           - Group: id status version instances

      id                - App id
      lastChanged       - Last time pod status was changed
      lastUpdated       - Last time pod status was updated (may not have changed)
      status            - State of pod: DEGRADED, STABLE, or TERMINAL
      statusSince       - Last time status of pod was modified
      instances         - # of pod instances
      version           - Pod specification version
      instanceCount     - # of instances in pod
      containerCount    - # of containers in pod
      instanceStatuses  - Status of instances in pod
      imageKinds        - Container image kinds
      imageIds          - Image ids
      volumeMountCounts - Count of volume mounts
      resources         - Group: cpus mem disk gpus
      cpus              - # of cpus assigned to each container
      mem               - amount of mem assigned to each container
      disk              - amount of disk assigned to each container
      gpus              - # of gpus assigned to each container
      totalResources    - Group: totalCpus totalMem totalDisk totalGpus
      totalCpus         - # of cpus assigned to all containers
      totalMem          - amount of mem assigned to all containers
      totalDisk         - amount of disk assigned to all containers
      totalGpus         - # of gpus assigned to all containers
      

EOF
}

marathon-curl-help() {
  cat <<EOF
Curl helper for Marathon Provides host, credentials; sets Content-Type to
application/json. Gregarious fellow, hit of the party, source of jealousy.

usage: ${INVOCATION} <uri> [curl args...]

Options:

   --help          - This help (when passed as first arg)

See curl --help for description of other options

EOF
}

escape-args() {
  while [ "$#" -gt 0 ]; do
    printf " %q" "$1"
    shift
  done
  printf "\n"
}

curl-with-auth() {
  if [ -z "$MARATHON_PRINCIPAL" ]; then
    eval "$MARATHON_CURL_CMD $(escape-args "${@}")"
  else
    echo 'user = "'$MARATHON_PRINCIPAL':'$MARATHON_SECRET'"' | eval "$MARATHON_CURL_CMD -K - $(escape-args "${@}")"
  fi
}

marathon-curl() {
  if [ "$1" = "--help" ] || [ -z "$1" ]; then
    marathon-curl-help
  fi

  URI=$1
  shift

  if ! (curl-with-auth -s -f -H "Content-Type: application/json" ${MARATHON_MASTER_URL}${URI} "${@}"); then
    cat <<-'EOF' 1>&2


Curl invocation unsuccessful; Try rerunning curl with -v flag to debug

    MARATHON_CURL_CMD="${MARATHON_CURL_CMD:-curl} -v" marathon-cli ...


EOF
    exit 1
  fi
}

join-str() {
  local delimiter="$1"
  shift
  local OUTPUT=""
  for ((n=1; n<=$#; n++)); do
    if [ "$n" -ne 1 ]; then
      OUTPUT+="${delimiter}"
    fi
    OUTPUT+="${!n}"
  done
  echo -n "$OUTPUT"
}

app-instance-list() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS
  local help="app-instance-list-help"

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  SORT_COLS=id

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        $help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id state startedAt host
          ;;

        appId|host|id|stagedAt|startedAt|state|version)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        ports|servicePorts)
          HEADERS+=($col)
          COLUMNS+=('((.'$col'[0:3] | map(tostring) | join(",")) + (if ((.'$col' | length) <= 3) then "" else ",..." end))')
          ;;

        hcConsecutiveFailures)
          HEADERS+=($col)
          COLUMNS+=('(.healthCheckResults // [] | map(.consecutiveFailures | tostring) | join(","))')
          ;;
        hcLastFailure)
          HEADERS+=($col)
          COLUMNS+=('(.healthCheckResults // [] | map(.lastFailure // "" | gsub("\\.[0-9]+"; "")) | join(","))')
          ;;
        hcLastSuccess)
          HEADERS+=($col)
          COLUMNS+=('(.healthCheckResults // [] | map(.lastSuccess | gsub("\\.[0-9]+"; "")) | join(","))')
          ;;

        hcFirstSuccess)
          HEADERS+=($col)
          COLUMNS+=('(.healthCheckResults // [] | map(.firstSuccess | gsub("\\.[0-9]+"; "")) | join(","))')
          ;;

        healthCheckResults)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;

        hcAlive)
          HEADERS+=($col)
          COLUMNS+=('((.healthCheckResults // []) | map(.alive | tostring) | join(","))')
          ;;

        ipAddresses)
          HEADERS+=($col)
          COLUMNS+=('(.ipAddresses | map(.ipAddress) | join(","))')
          ;;
        agentId)
          HEADERS+=($col)
          COLUMNS+=(.slaveId)
          ;;
        *)
          echo "Unknown column: $col" 1>&2
          $help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    marathon-curl "/v2/tasks" | jq '.tasks '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

pod-instance-list() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS
  local help="pod-instance-list-help"

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  SORT_COLS=id

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        $help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id status statusSince agentHostname
          ;;

        id|agentHostname|agentId|status|statusSince|specReferences|lastUpdated|lastChanged)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;

        cpus|mem|disk|gpus)
          HEADERS+=($col)
          COLUMNS+=(.resources.$col)
          ;;

        containerCount)
          HEADERS+=($col)
          COLUMNS+=("(.containers | length)")
          ;;

        volumeCount)
          HEADERS+=($col)
          COLUMNS+=("(.localVolumes | length)")
          ;;

        networkCount)
          HEADERS+=($col)
          COLUMNS+=("(.networks | length)")
          ;;


        *)
          echo "Unknown column: $col" 1>&2
          $help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    marathon-curl "/v2/pods/::status" | jq '[.[] | .instances[]] '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

app-list() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  SORT_COLS=id
  help=apps-list-help

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        $help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id version instances
          ;;
        taskCounts)
          interprete-cols tasksRunning tasksStaged tasksHealthy tasksUnhealthy
          ;;
        id|cmd|cpus|mem|disk|gpus|executor|backoffSeconds|backoffFactor|maxLaunchDelaySeconds|version|residency|killSelection|requirePorts|tasksRunning|tasksStaged|tasksHealthy|tasksUnhealthy|instances)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        ports)
          HEADERS+=(ports)
          COLUMNS+=('(.ports // (.portDefinitions // [] | map(.port)) as $ports | ($ports[0:3] | map(tostring) | join(",")) + (if (($ports | length) <= 3) then "" else ",..." end))')

          ;;
        container-type)
          HEADERS+=(container-type)
          COLUMNS+=(.container.type)
          ;;
        docker-network-type)
          HEADERS+=(docker-network-type)
          COLUMNS+=(.container.docker.network)
          ;;
        volume-count)
          HEADERS+=('# volumes')
          COLUMNS+=('(.container.volumes | length)')
          ;;
        docker-image)
          HEADERS+=(docker-image)
          COLUMNS+=(.container.docker.image)
          ;;
        lastScalingAt)
          HEADERS+=($col)
          COLUMNS+=(.versionInfo.lastScalingAt)
          ;;
        lastConfigChangeAt)
          HEADERS+=($col)
          COLUMNS+=(.versionInfo.lastConfigChangeAt)
          ;;
        deploymentCount)
          HEADERS+=('# deployments')
          COLUMNS+=('(.deployments | length)')
          ;;
        hcCount)
          HEADERS+=('# healthChecks')
          COLUMNS+=('(.healthChecks | length)')
          ;;
        hcType)
          HEADERS+=('healthCheck type')
          COLUMNS+=('(.healthChecks | map(.protocol) | join(","))')
          ;;

        *)
          echo "Unknown column: $col" 1>&2
          apps-help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    marathon-curl "/v2/apps" | jq '.apps '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

queue() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  SORT_COLS=id

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        apps-help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        apps-help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id count since delay processedOffersCount unusedOffersCount lastUsedOfferAt
          ;;
        id)
          HEADERS+=($col)
          COLUMNS+=('(.app.id // .pod.id)')
          ;;
        processedOffersCount|unusedOffersCount|lastUsedOfferAt)
          HEADERS+=($col)
          COLUMNS+=(.processedOffersSummary.$col)
          ;;
        count|since)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        overdue)
          HEADERS+=($col)
          COLUMNS+=("((.delay // {}).overdue)")
          ;;
        delay)
          HEADERS+=($col)
          COLUMNS+=("((.delay // {}).timeLeftSeconds)")
          ;;
        rejections)
          interprete-cols UnfulfilledRole UnfulfilledConstraint NoCorrespondingReservationFound AgentMaintenance InsufficientCpus InsufficientMemory InsufficientDisk InsufficientGpus InsufficientPorts DeclinedScarceResources
          ;;
        UnfulfilledRole|UnfulfilledConstraint|NoCorrespondingReservationFound|AgentMaintenance|InsufficientCpus|InsufficientMemory|InsufficientDisk|InsufficientGpus|InsufficientPorts|DeclinedScarceResources)
          HEADERS+=($col)
          COLUMNS+=("(.processedOffersSummary.rejectSummaryLastOffers | map(select(.reason  == \"$col\")) | map((.declined | tostring // \"\") + \" / \" + (.processed | tostring // \"\"))[0])")
          ;;
        *)
          echo "Unknown column: $col" 1>&2
          queue-help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    marathon-curl "/v2/queue" | jq '.queue '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

pod-list() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  SORT_COLS=id

  ALIGN_CMD=$'| column -t -s "\t"'
  help="pod-list-help"

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      --help)
        $help
        exit 1
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        pods-help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id status version instances
          ;;
        id|lastUpdated|lastChanged|status|statusSince)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        instances)
          HEADERS+=($col)
          COLUMNS+=(.spec.scaling.instances)
          ;;
        version)
          HEADERS+=($col)
          COLUMNS+=(.spec.$col)
          ;;
        instanceCount)
          HEADERS+=($col)
          COLUMNS+=('(.instances | length)')
          ;;
        containerCount)
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | length)')
          ;;
        instanceStatuses)
          HEADERS+=($col)
          COLUMNS+=('(.instances | map(.status) | join(","))')
          ;;
        imageKinds)
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | map(.image.kind) | join(","))')
          ;;
        imageIds)
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | map(.image.id) | unique)')
          ;;
          
        volumeMountCounts)
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | map(.volumeMounts | length | tostring) | join(","))')
          ;;

        resources)
          interprete-cols cpus mem disk gpus
          ;;
        totalResources)
          interprete-cols totalCpus totalMem totalDisk totalGpus
          ;;
          
        cpus|mem|disk|gpus)
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | map(.resources.'$col' | tostring) | join(","))')
          ;;

        totalCpus|totalDisk|totalMem|totalGpus)
          resource=${col:5}
          resource="${resource,,}"
          HEADERS+=($col)
          COLUMNS+=('(.spec.containers | map(.resources.'$resource') | add)')
          ;;

        *)
          echo "Unknown column: $col" 1>&2
          $help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    marathon-curl "/v2/pods/::status" | jq '. '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

if [ -z "$cmd" ]; then
  help
  exit 1
fi

logging-list() {
  output-it() {
    printf "path\tlevel\n"
    marathon-curl /logging | jq '. | to_entries | sort_by(.key) | map(.key + "\t" + .value)[]' -r
  }

  output-it | column -t -s $'\t'
}

logging-set() {
  local NAME=ROOT
  local DURATION=""
  help() {
    cat <<-EOF
Set log level

usage: ${INVOCATION} set <ERROR|WARN|INFO|DEBUG|TRACE> [options]

  Options:

  --duration      - Duration for which to change the log level

  --name          - Name of the logger to set

  --help          - This help
EOF

EOF
  }
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -d|--duration)
        DURATION=$1
        shift
        ;;
      -n|--name)
        NAME=$1
        shift
        ;;
      --help)
        $help
        exit 1
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      DEBUG|INFO|TRACE|WARN|ERROR)
        if [ -z "$LEVEL" ]; then
          LEVEL="$arg"
        else
          echo "Level already specified"
          $help
          exit 1
        fi
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        $help
        exit 1
        ;;
    esac
  done

  if [ -z "$LEVEL" ]; then
    $help
    exit 1
  fi

  local DURATIONJSON=""
  if [ ! -z "$DURATION" ]; then
    DURATIONJSON="$(printf ', "durationSeconds": %d' "$DURATION")"
  fi

  marathon-curl /logging -X POST --data "$(printf '{"logger": "%s", "level": "%s"%s}' "$NAME" "$LEVEL" "$DURATIONJSON")"
}


logging() {
  subcmd=$1
  shift
  case "$subcmd" in
    list)
      logging-list "$@"
      ;;
    set)
      logging-set "$@"
  esac
}

pod() {
  help=pod-help
  if [ -z "$1" ]; then
    $help
    exit 1
  fi

  subcmd=$1
  shift
  INVOCATION="$INVOCATION $subcmd"
  case "$subcmd" in
    list) pod-list "$@" ;;
    instance) pod-instance "$@" ;;
    delete) pod-delete "$@" ;;
    show) pod-show "$@" ;;
    edit) pod-edit "$@" ;;
    *)
      echo "Error: subcommand $subcmd not valid"
      pod-help
      exit 1
      ;;
  esac
}

app() {
  help=app-help
  if [ -z "$1" ]; then
    $help
    exit 1
  fi

  subcmd=$1
  shift
  INVOCATION="$INVOCATION $subcmd"
  case "$subcmd" in
    list) app-list "$@" ;;
    instance) app-instance "$@" ;;
    delete) app-delete "$@" ;;
    show) app-show "$@" ;;
    scale) app-scale "$@" ;;
    edit) app-edit "$@" ;;
    restart) app-restart "$@" ;;
    help) $help "$@" ;;
    *)
      echo "Error: subcommand $subcmd not valid"
      pod-help
      exit 1
      ;;
  esac
}

app-instance() {
  help=app-instance-help
  if [ -z "$1" ]; then
    $help
    exit 1
  fi

  subcmd=$1
  shift
  INVOCATION="$INVOCATION $subcmd"
  case "$subcmd" in
    list) app-instance-list "$@" ;;
    show) app-instance-show "$@" ;;
    kill) app-instance-kill "$@" ;;
    help) $help "$@" ;;
    *)
      echo "Error: subcommand $subcmd not valid"
      pod-help
      exit 1
      ;;
  esac
}

pod-instance() {
  help=pod-instance-help
  if [ -z "$1" ]; then
    $help
    exit 1
  fi

  subcmd=$1
  shift
  INVOCATION="$INVOCATION $subcmd"
  case "$subcmd" in
    list) pod-instance-list "$@" ;;
    kill) pod-instance-kill "$@" ;;
    help) $help "$@" ;;
    *)
      echo "Error: subcommand $subcmd not valid"
      pod-help
      exit 1
      ;;
  esac
}



case "$cmd" in
  queue) queue "$@" ;;
  app) app "$@" ;;
  pod) pod "$@" ;;
  curl) marathon-curl "$@" ;;
  log) logging "$@" ;;
  *) echo "unrecognized command: $cmd"; help; exit 1 ;;
esac

#!/usr/bin/env bash

: ${MESOS_PAGINATE_SIZE:=1000}
: ${MESOS_CURL_CMD:=curl}
: ${MESOS_CLI_CFG:=/etc/default/mesos-cli}
: ${MESOS_HTTP_PROTO:=http}
: ${MESOS_MASTER_URL:=${MESOS_HTTP_PROTO}://leader.mesos:5050}
: ${MESOS_GUI_URL:=http://leader.mesos}
# for compat with pre mesos 1.0.0, set to slaves
: ${MESOS_AGENT_NAME:=agents}

progname=$(basename "$0")

if [ "$progname" != "mesos-cli" ]; then
  cmd=${progname#mesos-}
  INVOCATION="$0"
else
  cmd=$1
  shift
  INVOCATION="$0 $cmd"
fi

if [ -f "${MESOS_CLI_CFG}" ]; then
  source "${MESOS_CLI_CFG}"
fi

set -e

help() {
  cat <<EOF
Usage: ${INVOCATION} <cmd> [<options...>]

Commands:

  - agent        : inspect a single agent
  - agents       : list agents
  - curl         : curl helper for mesos; first arg URI, rest forwarded to curl.
  - executor-url : show the executor-url for a given task
  - frameworks   : list frameworks
  - sandbox      : show the sandbox for a given task
  - task         : inspect a mesos task
  - tasks        : list mesos tasks

For help on commands, $0 <cmd> --help

EOF
}


sandbox-help() {
  cat <<EOF
Output the sandbox path for the mesos task

usage: ${INVOCATION} <id>

  Options:

  -u, --url   - Output a URL to browse the mesos sandbox from your browser

  --help      - This help
EOF
}

executor-url-help() {
  cat <<EOF
Output the URL for the executor

usage: ${INVOCATION} <id>

  Options:

  -u, --url   - Output a URL to browse the mesos sandbox from your browser

  --help      - This help
EOF
}

agents-help() {
  cat <<EOF
List agents in the cluster.

usage: ${INVOCATION} [options...]

  Options:

  --all, -a                    - List all mesos agents

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default         - id hostname roles
      id              - Agent id
      hostname        - Agent hostname
      domain          - Agent fault domain (region/zone)
      port            - Port on which agent is listening (HTTP)
      version
      active
      pid
      roles           - Agent resource roles
      attributes      - Configured agent attributes
      cpus            - Total CPUs managed by agent
      mem             - Total mem managed by agent (mb)
      disk            - Total disk managed by agent (mb)
      gpus            - Total GPUs managed by agent
      ports           - Host port ranges managed by agent
      used-cpus       - Total CPUs assigned to running tasks
      used-mem        - Total memory assigned to running tasks
      used-disk       - Total disk assigned to running tasks
      used-gpus       - Total GPUs assigned to running tasks
      reserved-cpus   - Total reserved CPUs (used and unused)
      reserved-mem    - Total reserved mem (used and unused)
      reserved-disk   - Total reserved disk (used and unused)
      reserved-gpus   - Total reserved GPUs (used and unused)
      unreserved-cpus - Total unreserved CPUs (used and unused)
      unreserved-mem  - Total unreserved mem (used and unused)
      unreserved-disk - Total unreserved disk (used and unused)
      unreserved-gpus - Total unreserved GPUs (used and unused)
      registered      - Time at which the agent was registered
      domain          - Fault domain: region/zone
      zone            - Fault domain: region
      region          - Fault domain: zone

EOF
}

frameworks-help() {
  cat <<EOF
List frameworks in the cluster.

usage: ${INVOCATION} [options...]

  Options:

  --all, -a                    - List all mesos frameworks (inactive and unregistered)

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default            - id hostname name
      id                 - Framework id
      h,hostname         - Hostname on which the framework is running
      p,pid              - Mesos PID
      n,name             - Framework name
      user               - User as which the framework is registered
      role               - Framework role
      offered-disk       - Amount of disk offered to the framework
      offered-mem        - " mem
      offered-gpus       - " gpus
      offered-cpus       - " cpus
      used-disk          - Total disk used by framework tasks
      used-mem           - " mem
      used-gpus          - " gpus
      used-cpus          - " cpus
      tasks-statuses     - All task status count columns
      tasks-staging      - Count of tasks in state TASK_STAGING
      tasks-starting     - " TASK_STARTING
      tasks-running      - " TASK_RUNNING
      tasks-killing      - " TASK_KILLING
      tasks-finished     - " TASK_FINISHED
      tasks-killed       - " TASK_KILLED
      tasks-failed       - " TASK_FAILED
      tasks-lost         - " TASK_LOST
      tasks-error        - " TASK_ERROR
      tasks-unreachable  - " TASK_UNREACHABLE
      active             - Is the framework active?
      web_ui             - Registered Web UI URL
      capabilities       - Registered capabilities
      registered         - Time at which the framework was registered
      unregistered       - Time at which the framework was unregistered, if any
      failover_timeout   - Failover timeout (in days)
      recovered          - True if framework previously subscribed but hasn't yet re-subscribed after a Mesos master failover
      connected          - Framework is currently connected
      principal          - Principal that the framework used for authentication


EOF
}

tasks-help() {
  cat <<EOF
List mesos tasks in the cluster.

usage: ${INVOCATION} [options...]

  Options:

  --all, -a                    - List all mesos tasks

  --limit, -l <n>              - Limit output (note: this limit is applied
                                 pre-filter, pre-sort)

  --sort, -s <col1,col2,...>   - sort output by the columns; see column list
                                 below.

  --columns, -c <col1,col2,..> - display columns; see column list below

  --no-header                  - removes the column header from being printed
                                 out

  --no-align                   - don't align; output tab delimited columns

  --help                       - This help

column list:

      default      - Group: id,host,state,started
      id           - Task id
      name         - Name of container
      role         - Task role
      cpus         - # of cpus assigned to task
      mem          - # of ram (MB) assigned to task
      gpus         - # of gpus assigned to task
      disk         - # of disk (MB) assigned to task
      ports        - ports assigned to process
      state        - Status off task
      type         - Type of container (docker or not)
      image        - If docker, what image is used
      h,host       - Host on which container is running
      ip           - IP address of task
      ips          - IP addresses of task
      url          - The executor URL for the task
      started      - Start time
      finished     - Finish time
      agent_id     - Agent (slave) id
      framework_id - Id of framework that launched this task
      executor_id  - Executor id
      domain       - Agent fault domain: region/zone
      zone         - Agent fault domain: region
      region       - Agent fault domain: zone
      docker-image - Docker image, if applicable

EOF
}

agent-help() {
  cat <<EOF
Show the full JSON details for a single Mesos agent.

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

task-help() {
  cat <<EOF
Show the full JSON details for a mesos task. Paginates backwards by
MESOS_PAGINATE_SIZE (default 1000) until it finds the task.

usage: ${INVOCATION} <id>

  Options:

  --color         - Force color output. By default, color output is enabled if
                    STDOUT is a terminal.

  --no-color      - Force monochrome output.

  --help          - This help
EOF
}

mesos-curl-help() {
  cat <<EOF
Curl helper for mesos. Provides host, credentials; sets Content-Type to
application/json. Gregarious fellow, hit of the party, source of jealousy.

usage: ${INVOCATION} <uri> [curl args...]

Options:

   --help          - This help (when passed as first arg)

See curl --help for description of other options

EOF
}

escape-args() {
  while [ "$#" -gt 0 ]; do
    printf " %q" "$1"
    shift
  done
  printf "\n"
}

curl-with-auth() {
  if [ -z "$MESOS_PRINCIPAL" ]; then
    eval "$MESOS_CURL_CMD $(escape-args "${@}")"
  else
    echo 'user = "'$MESOS_PRINCIPAL':'$MESOS_SECRET'"' | eval "$MESOS_CURL_CMD -K - $(escape-args "${@}")"
  fi
}

mesos-curl() {
  if [ "$1" = "--help" ] || [ -z "$1" ]; then
    mesos-curl-help
    return 1
  fi

  URI=$1
  shift

  if ! (curl-with-auth -s -f -H "Content-Type: application/json" ${MESOS_MASTER_URL}${URI} "${@}"); then
    cat <<-'EOF' 1>&2

Curl invocation unsuccessful; Try rerunning curl with -v flag to debug

    MESOS_CURL_CMD="${MESOS_CURL_CMD:-curl} -v" mesos-cli ...


EOF
    exit 1
  fi
}

slave-map() {
  mesos-curl /state-summary | jq '.slaves | map({ (.id) : {domain: .domain, hostname: .hostname} }) | add'
}



join-str() {
  local delimiter="$1"
  shift
  local OUTPUT=""
  for ((n=1; n<=$#; n++)); do
    if [ "$n" -ne 1 ]; then
      OUTPUT+="${delimiter}"
    fi
    OUTPUT+="${!n}"
  done
  echo -n "$OUTPUT"
}

agent() {
  declare -a OTHERARGS
  local COLOR_OUTPUT=""
  if [ -t 1 ]; then
    COLOR_OUTPUT="--color-output"
  else
    COLOR_OUTPUT="--monochrome-output"
  fi


  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        agent-help
        exit 0
        ;;
      --color)
        COLOR_OUTPUT="--color-output"
        ;;
      --no-color)
        COLOR_OUTPUT="--monochrome-output"
        ;;
      -*)
        echo "Unrecognized argument: $arg" 1>&2
        agent-help
        exit 1
        ;;
      *)
        OTHERARGS+=("$arg")
        ;;
    esac
  done

  if [ "${#OTHERARGS[@]}" -ne 1 ]; then
    echo "expected one argument specifying an agent id; got ${OTHERARGS[@]}"
    agent-help
    exit 1
  fi

  local agent_id="${OTHERARGS[0]}"

  mesos-curl "/slaves" | jq $COLOR_OUTPUT '.slaves[] | select(.id == "'"${agent_id}"'")'
  return 1
}

framework() {
  declare -a OTHERARGS
  local COLOR_OUTPUT=""
  local help=task-help
  local framework_id=""
  if [ -t 1 ]; then
    COLOR_OUTPUT="--color-output"
  else
    COLOR_OUTPUT="--monochrome-output"
  fi


  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        COLOR_OUTPUT="--color-output"
        ;;
      --no-color)
        COLOR_OUTPUT="--monochrome-output"
        ;;
      -*)
        echo "Unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        if [ -z "$framework_id" ]; then
          framework_id="$arg"
        else
          echo "expected one argument specifying a framework id; got multiple"
          $help
          exit 1
        fi
        ;;
    esac
  done

  jq $COLOR_OUTPUT '.frameworks[] | select(.id == "'"$arg"'")' <(mesos-curl "/frameworks")
}

task() {
  declare -a OTHERARGS
  local COLOR_OUTPUT=""
  local help=task-help
  if [ -t 1 ]; then
    COLOR_OUTPUT="--color-output"
  else
    COLOR_OUTPUT="--monochrome-output"
  fi


  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        $help
        exit 0
        ;;
      --color)
        COLOR_OUTPUT="--color-output"
        ;;
      --no-color)
        COLOR_OUTPUT="--monochrome-output"
        ;;
      -*)
        echo "Unrecognized argument: $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        OTHERARGS+=("$arg")
        ;;
    esac
  done

  if [ "${#OTHERARGS[@]}" -ne 1 ]; then
    echo "expected one argument specifying a task id; got ${OTHERARGS[@]}"
    $help
    exit 1
  fi


  # search backwards until we find the task; this is a bit complex because mesos has not way to fetch a task by id
  local OFFSET=0
  local RESULT=""
  local CONTINUE=1
  local SLAVE_MAP=$(slave-map)

  while [ $CONTINUE = 1 ]; do
    RESULT="$(jq -s '.[0].tasks | {"count": (. | length), "matches": (. | map(select(.id == "'"${OTHERARGS[0]}"'")))}' --monochrome-output -r <(mesos-curl "/tasks?limit=$MESOS_PAGINATE_SIZE&offset=$OFFSET"))"
    if [[ "$(echo "$RESULT" | jq .count -r)" -lt "$MESOS_PAGINATE_SIZE" ]]; then
      CONTINUE=0
    fi

    FORMATTED_RESULTS="$(jq $COLOR_OUTPUT '.[0] as $slaves | .[1].matches[] | ([{ "id": .id, "name": .name }, $slaves[.slave_id], .] | add)' -s <(echo "$SLAVE_MAP") <(echo "$RESULT"))"

    if [ -z "$FORMATTED_RESULTS" ]; then
      OFFSET=$((OFFSET + MESOS_PAGINATE_SIZE))
    else
      echo "$FORMATTED_RESULTS"
      return 0
    fi
  done
  return 1
}

executor-url() {
  declare -a OTHERARGS

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        executor-url-help
        exit 0
        ;;
      -*)
        echo "Unrecognized argument: $arg" 1>&2
        executor-url-help
        exit 1
        ;;
      *)
        OTHERARGS+=("$arg")
        ;;
    esac
  done

  if [ "${#OTHERARGS[@]}" -ne 1 ]; then
    echo "expected one argument specifying a task id; got ${OTHERARGS[@]}"
    executor-url-help
    exit 1
  fi

  task "${OTHERARGS[0]}" | jq '"'$MESOS_GUI_URL'/#/'$MESOS_AGENT_NAME'/" + .slave_id + "/frameworks/" + .framework_id + "/executors/" + (if .executor_id == "" then .id else .executor_id end)' -r
}


agent-curl() {
  local AGENT_ID=$1
  shift
  local AGENT_HOSTNAME=$1
  shift
  local URI=$1
  shift

  if [ ! -z "$MESOS_AGENT_URL_PREFIX" ]; then
    curl-with-auth -s -f -H "Content-Type: application/json" ${MESOS_AGENT_URL_PREFIX}/${AGENT_ID}${URI} "${@}"
  else
    curl-with-auth -s -f -H "Content-Type: application/json" ${MESOS_HTTP_PROTO}://${AGENT_HOSTNAME}:5051${URI} "${@}"
  fi
}

sandbox() {
  declare -a OTHERARGS
  SHOW_URL=false

  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      --help)
        sandbox-help
        exit 0
        ;;
      -u|--url)
        SHOW_URL=true
        ;;
      -*)
        echo "Unrecognized argument: $arg" 1>&2
        sandbox-help
        exit 1
        ;;
      *)
        OTHERARGS+=("$arg")
        ;;
    esac
  done

  if [ "${#OTHERARGS[@]}" -ne 1 ]; then
    echo "expected one argument specifying a task id; got ${OTHERARGS[@]}"
    sandbox-help
    exit 1
  fi

  mesos-vars() {
    echo "$1"| sed -E 's:^(.*)/slaves/([^/]+)/frameworks/([^/]+)/executors/([^/]+)/runs/([^/]+).*:MESOS_WORK=\1; AGENT_ID=\2; FRAMEWORK_ID=\3; EXECUTOR_ID=\4; RUN_ID=\5; FULL_PATH="\0":g' | egrep ^MESOS_WORK
  }


  ID="${OTHERARGS[0]}"
  task "$ID" --no-color | jq '.slave_id + " " + .hostname' -r | while read id_host; do
    agent-curl $id_host /state | jq '[.frameworks, .completed_frameworks] | add | map([.executors, .completed_executors]) | flatten | map( { "directory": .directory, "tasks": ([.tasks, .queued_tasks, .completed_tasks] | add | map(select(.id == "'"${ID}"'"))) })[] | select(.tasks | length > 0) | .directory' -r | while read sandbox_path; do
      if $SHOW_URL; then
        eval "$(mesos-vars "$sandbox_path")"
        echo $MESOS_GUI_URL/#/$MESOS_AGENT_NAME/${AGENT_ID}/browse?path=$(echo $FULL_PATH | sed "s|/|%2f|g")
      else
        echo $sandbox_path
      fi
    done
  done
}

agents() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS

  declare -a SELECTS

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  ALL=false
  SORT_COLS=

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -a|--all)
        ALL=true
        ;;
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        agents-help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        agents-help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id hostname roles
          ;;
        port|id|hostname|version|active|pid)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        r|roles)
          HEADERS+=(reserved-resource-roles)
          COLUMNS+=('(.reserved_resources_full | keys | join(","))')
          ;;
        attributes)
          HEADERS+=($col)
          COLUMNS+=('(.attributes | to_entries | map(.key + "=" + .value) | join(","))')
          ;;
        disk|mem|gpus|cpus)
          HEADERS+=($col)
          COLUMNS+=(.resources.$col)
          ;;
        ports)
          HEADERS+=($col)
          COLUMNS+=('(.resources.ports | gsub("[\\]\\[ ]"; ""))')
          ;;
        registered)
          HEADERS+=($col)
          COLUMNS+=('(.registered_time | todate)')
          ;;
        used-disk|used-mem|used-gpus|used-cpus)
          HEADERS+=($col)
          COLUMNS+=(.used_resources.${col:5})
          ;;
        zone)
          HEADERS+=($col)
          COLUMNS+=('(if (.domain != null) then (.domain.fault_domain.zone.name) else "" end)')
          ;;
        region)
          HEADERS+=($col)
          COLUMNS+=('(if (.domain != null) then (.domain.fault_domain.region.name) else "" end)')
          ;;
        domain)
          HEADERS+=($col)
          COLUMNS+=('(if (.domain != null) then (.domain.fault_domain.region.name + "/" + .domain.fault_domain.zone.name) else "" end)')
          ;;
        unreserved-disk|unreserved-mem|unreserved-gpus|unreserved-cpus)
          HEADERS+=($col)
          COLUMNS+=(.unreserved_resources.${col:11})
          ;;
        reserved-disk|reserved-mem|reserved-gpus|reserved-cpus)
          HEADERS+=($col)
          COLUMNS+=('(.reserved_resources | to_entries | map(.key + ":" + (.value.'${col:9}' | tostring)) | join (","))')
          ;;

        *)
          echo "Unknown column: $col" 1>&2
          agents-help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST
  if ! $ALL; then
    SELECTS+=('select(.active == true)')
  fi

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    jq -r '.slaves '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' <(mesos-curl "/slaves")
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

frameworks() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS

  declare -a SELECTS

  COLUMN_LIST="default"
  NO_HEADER=false
  NO_ALIGN=false
  ALL=false
  SORT_COLS=
  local help=frameworks-help

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -a|--all)
        ALL=true
        ;;
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        $help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        frameworks-help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id hostname name
          ;;
        tasks-statuses)
          interprete-cols tasks-staging tasks-starting tasks-running tasks-killing tasks-finished tasks-killed tasks-failed tasks-lost tasks-error tasks-unreachable
          ;;
        id|role|active|user|checkpoint|recovered|webui_url|connected|principal)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        h|hostname)
          HEADERS+=(hostname)
          COLUMNS+=(.hostname)
          ;;
        p|pid)
          HEADERS+=(pid)
          COLUMNS+=(.pid)
          ;;
        n|name)
          HEADERS+=(name)
          COLUMNS+=(.name)
          ;;
        offered-disk)
          HEADERS+=(offered-disk)
          COLUMNS+=(.offered_resources.disk)
          ;;
        offered-mem)
          HEADERS+=(offered-mem)
          COLUMNS+=(.offered_resources.mem)
          ;;
        offered-gpus)
          HEADERS+=(offered-gpus)
          COLUMNS+=(.offered_resources.gpus)
          ;;
        offered-cpus)
          HEADERS+=(offered-cpus)
          COLUMNS+=(.offered_resources.cpus)
          ;;
        used-disk)
          HEADERS+=(used-disk)
          COLUMNS+=(.used_resources.disk)
          ;;
        used-mem)
          HEADERS+=(used-mem)
          COLUMNS+=(.used_resources.mem)
          ;;
        used-gpus)
          HEADERS+=(used-gpus)
          COLUMNS+=(.used_resources.gpus)
          ;;
        used-cpus)
          HEADERS+=(used-cpus)
          COLUMNS+=(.used_resources.cpus)
          ;;
        tasks-staging|tasks-starting|tasks-running|tasks-killing|tasks-finished|tasks-killed|tasks-failed|tasks-lost|tasks-error|tasks-unreachable)
          status=${col:6}
          HEADERS+=("# ${status}")
          COLUMNS+=(".TASK_${status^^}")
          ;;
        ui)
          ## backwards compat
          interprete-cols webui_url
          ;;

        registered)
          HEADERS+=($col)
          COLUMNS+=('(.registered_time | todate)')
          ;;

        unregistered)
          HEADERS+=($col)
          COLUMNS+=('(if (.unregistered_time == 0) then "" else .unregistered_time | todate end)')
          ;;

        capabilities)
          HEADERS+=(capabilities)
          COLUMNS+=('(.capabilities | join(","))')
          ;;
          
        failover_timeout)
          HEADERS+=(failover_timeout)
          COLUMNS+=('((.failover_timeout / 8640 | floor / 10 | tostring) + " days")')
          ;;
        *)
          echo "Unknown column: $col" 1>&2
          $help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST
  if ! $ALL; then
    SELECTS+=('select(.active == true  and .unregistered_time == 0)')
  fi

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    jq -r '[.frameworks[], .unregistered_frameworks[], .completed_frameworks[]] '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' <(mesos-curl "/frameworks")
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

tasks() {
  declare -a OTHERARGS
  declare -a COLUMNS
  declare -a HEADERS
  declare -a SELECTS

  COLUMN_LIST="id host state started"
  NO_HEADER=false
  NO_ALIGN=false
  LIMIT=500
  ALL=false
  SORT_COLS=

  ALIGN_CMD=$'| column -t -s "\t"'
  while ! [ -z "$1" ]; do
    arg="$1"
    shift
    case "$arg" in
      -a|--all)
        ALL=true
        ;;
      -s|--sort)
        SORT_COLS=$(echo "$1" | tr , ' ')
        shift
        ;;
      -l|--limit)
        LIMIT=$1
        shift
        ;;
      -c|--columns)
        COLUMN_LIST=$(echo "$1" | tr , ' ')
        shift
        ;;
      --no-header)
        NO_HEADER=true
        ;;
      --no-align)
        NO_ALIGN=true
        ;;
      -f|--filter)
        FILTER_COL=$(echo "$1" | cut -f 1 -d =)
        FILTER_VALUE=$(echo "$1" | cut -f 2 -d =)
        echo FILTER_COL = $FILTER_COL
        shift
        ;;
      -*)
        echo "Unrecognized option $arg" 1>&2
        tasks-help
        exit 1
        ;;
      *)
        echo "Unexpected argument: $arg" 1>&2
        tasks-help
        exit 1
        ;;
    esac
  done

  interprete-cols() {
    for col in "$@"; do
      case "$col" in
        default)
          interprete-cols id host state started
          ;;
        id)
          HEADERS+=(id)
          COLUMNS+=(.id)
          ;;
        cpus|mem|gpus|disk)
          HEADERS+=($col)
          COLUMNS+=(.resources.$col)
          ;;
        started)
          HEADERS+=(started)
          COLUMNS+=('((.statuses | map(select(.state == "TASK_RUNNING"))) | map(.timestamp | todate)[0] // "")')
          ;;
        finished)
          HEADERS+=(finished)
          COLUMNS+=('((.statuses | map(select(.state != "TASK_RUNNING"))) | map(.timestamp | todate)[0] // "")')
          ;;
        ports)
          HEADERS+=(ports)
          COLUMNS+=(.resources.ports)
          ;;
        state|name|framework_id|executor_id|role)
          HEADERS+=($col)
          COLUMNS+=(.$col)
          ;;
        t|type)
          HEADERS+=(type)
          COLUMNS+=('.container.type // ""')
          ;;
        image)
          HEADERS+=(image)
          COLUMNS+=('.container.docker.image // ""')
          ;;
        h|host)
          HEADERS+=(host)
          COLUMNS+=('$slaves[.slave_id].hostname')
          ;;
        agent_id)
          HEADERS+=(agent_id)
          COLUMNS+=(.slave_id)
          ;;
        ip)
          HEADERS+=(ip)
          COLUMNS+=('(.statuses | map(.container_status.network_infos[] | .ip_addresses[] | .ip_address)[0])')
          ;;
        ips)
          HEADERS+=(ips)
          COLUMNS+=('(.statuses | map(.container_status.network_infos[] | .ip_addresses[] | .ip_address) | join(", "))')
          ;;
        url)
          HEADERS+=(url)
          COLUMNS+=('"'$MESOS_GUI_URL'/#/'$MESOS_AGENT_NAME'/" + .slave_id + "/frameworks/" + .framework_id + "/executors/" + ((if .executor_id == "" then .id else .executor_id end) | @uri)')
          ;;
        zone)
          HEADERS+=($col)
          COLUMNS+=('(if ($slaves[.slave_id].domain != null) then ($slaves[.slave_id].domain.fault_domain.zone.name) else "" end)')
          ;;
        region)
          HEADERS+=($col)
          COLUMNS+=('(if ($slaves[.slave_id].domain != null) then ($slaves[.slave_id].domain.fault_domain.region.name) else "" end)')
          ;;
        domain)
          HEADERS+=($col)
          COLUMNS+=('(if ($slaves[.slave_id].domain != null) then ($slaves[.slave_id].domain.fault_domain.region.name + "/" + $slaves[.slave_id].domain.fault_domain.zone.name) else "" end)')
          ;;
        docker-image)
          HEADERS+=($col)
          COLUMNS+=('(.container // {} | .docker // {} | .image)')
          ;;
        *)
          echo "Unknown column: $col" 1>&2
          tasks-help
          exit 1
          ;;
      esac
    done
  }

  # hack: hijack interprete-cols to get the column expression
  interprete-cols $SORT_COLS
  SORT_EXPS=("${COLUMNS[@]}")
  COLUMNS=()
  HEADERS=()
  interprete-cols $COLUMN_LIST
  if ! $ALL; then
    SELECTS+=('select(.state == "TASK_RUNNING")')
  fi

  output-it() {
    if ! $NO_HEADER; then
      join-str $'\t' "${HEADERS[@]}"
      echo
    fi

    SELECT_EXP=""
    for expr in "${SELECTS[@]}"; do
      SELECT_EXP+="| ${expr}"
    done

    if [ "${#SORT_EXPS[@]}" -ne 0 ]; then
      SORT_EXP="| sort_by($(join-str , "${SORT_EXPS[@]}"))"
    fi

    jq -s '.[0] as $slaves | .[1] | .tasks '"$SORT_EXP"' | .[] '"$SELECT_EXP"' | [ '"$(join-str , "${COLUMNS[@]}")"' ] | map(. | tostring) | join("\t")' -r <(slave-map) <(mesos-curl "/tasks?limit=$LIMIT")
  }

  if $NO_ALIGN; then
    output-it
  else
    output-it | column -t -s $'\t'
  fi
}

if [ $(basename "$0") != "bash" ]; then
  if [ -z "$cmd" ]; then
    help
    exit 1
  fi

  case "$cmd" in
    curl) mesos-curl "$@" ;;
    ps|tasks) tasks "$@" ;;
    frameworks) frameworks "$@" ;;
    framework) framework "$@" ;;
    agents) agents "$@" ;;
    agent) agent "$@" ;;
    executor-url) executor-url "$@" ;;
    inspect|task) task "$@" ;;
    sandbox) sandbox "$@" ;;
    curl) mesos-curl "$@" ;;
    *) echo "unrecognized command: $cmd"; help; exit 1 ;;
  esac
fi


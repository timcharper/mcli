#!/usr/bin/env bash

cat-maybe-gzip() {
  if [ -f "$1" ]; then
    # unfortunately, just because a file lacks the gzip extension, in some bundles it still may be gzipped :(
    gunzip -c -q $1 || cat $1
  else
    gunzip -c ${1}.gz
  fi
}

path-filename() {
  local PATH_FILENAME=$(echo "$1" | cut -f 1 -d ? | sed 's|/|_|g')
  echo ${URL_HOSTNAME}_master/${URL_PORT}${BUNDLE_PORT_DELIMITER}${PATH_FILENAME}.json
}

cat-path() {
  local URL_PATH="$1"
  case "$URL_PATH" in
    v2/apps/?*)
      # since we're working with a diagnostic bundle, we're going to emulate this endpoint by searching through all of the apps and filtering down to the selected one
      APP_ID="${URL_PATH:7}"
      cat-path "v2/apps" | jq -M -c '.apps[] | select(.id == "'"$APP_ID"'")'
      ;;
    v2/pods)
      POD_FILE="$(path-filename "$URL_PATH")"
      EXISTING_FILE=$(find "$POD_FILE"* 2> /dev/null | head -n 1)
      if [ ! -z "$EXISTING_FILE" ]; then
        cat-maybe-gzip "$EXISTING_FILE"
      else
        # diagnostic bundle did not contain pods; reconstruct pods from the /v2/groups endpoint.
        cat-maybe-gzip "$(path-filename v2/groups)" | jq -c -M '[recurse(.groups[]) | .pods[]]'
      fi
      ;;
    v2/pods/::*)
      cat-maybe-gzip "$(path-filename "$URL_PATH")"
      ;;
    v2/pods/?*)
      POD_ID="${URL_PATH:7}"
      cat-path "v2/pods" | jq -M -c '.[] | select (.id == "'"$POD_ID"'")'
      ;;
    *)
      cat-maybe-gzip "$(path-filename "$URL_PATH")"
      ;;
  esac
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -K) shift ;;
    -s) ;;
    -H) shift ;;
    *) URL=$1 ;;
  esac
  shift
done

URL_AUTHORITY=$(echo "$URL" | cut -f 3 -d /)
URL_PATH=$(echo "$URL" | cut -f 4-20 -d /)
URL_HOSTNAME=$(echo $URL_AUTHORITY | cut -f 1 -d :)
URL_PORT=$(echo $URL_AUTHORITY | cut -f 2 -d :)

cat-path "$URL_PATH"
